
name: 🐍 release

on:
  release:
    types: [created]

jobs:
  update-release:
    runs-on: ubuntu-latest

    permissions:
      issues: write
      contents: write

    steps:
      - name: 📂 Checkout code
        uses: actions/checkout@v4

      - name: 📦️ Create ZIP Archive
        run: zip -r ${{ github.event.repository.name }}.zip .

      - name: ⬆️ Upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./${{ github.event.repository.name }}.zip
          asset_name: ${{ github.event.repository.name }}.zip
          asset_content_type: application/zip


      # - name: 📝 Update Release Description with Closed Issues and Assignees
      #   run: bash scripts/find_closed_issues.sh ${{ secrets.GITHUB_TOKEN }} ${{ github.event.release.url }}
      - name: Update Release Description
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
           URL="https://api.github.com/repos/${{ github.repository }}"
           AUTHORIZE="Authorization: Bearer $GITHUB_TOKEN"
           CURRENT_RELEASE_PATH=${{ github.event.release.url }}
       
           # Fetch the creation date of the second most recent release
           previous_release_created_at=$(curl -s -H "$AUTHORIZE" "$URL/releases" | jq -r '.[1].created_at')
           echo "previous_release_created_at - $previous_release_created_at"
       
           # Fetch closed issues since the second most recent release
           issues=$(curl -s -H "$AUTHORIZE" "$URL/issues?state=closed&per_page=100&since=$previous_release_created_at&until=$(date -u +'%Y-%m-%dT%H:%M:%SZ')")
       
           # Check if any closed issues are found
           if [ -n "$issues" ]; then
             # Format closed issues into a list
             issue_list=$(echo "$issues" | jq -aRs 'split("\n") | map(select(length > 0)) | map("- \(.)") | join("\n")')
             echo "issue_list - $issue_list"
           else
             # Set the issue list string to indicate no closed issues found
             issue_list="No closed issues found since the last release."
             echo "$issue_list"
           fi
       
           # Update the release description with the generated issue list
           curl -X PATCH -H "$AUTHORIZE" -H "Content-Type: application/json" -d "{\"body\": \"Whats Changed:\\n\\n$issue_list\"}" "$CURRENT_RELEASE_PATH"