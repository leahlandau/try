name: üêç Create Tag and Release

on: release

jobs:
  build:
    name: Upload Release Asset
    runs-on: ubuntu-latest

    permissions:
      issues: write
      contents: write

    steps:
      - name: üìÇ Checkout code
        uses: actions/checkout@v4

      - name: üì¶Ô∏è Create ZIP Archive
        run: zip -r repository.zip .

      # - name: üè∑Ô∏è get tag name
      #   run: |
      #     pr_branch=${{ github.event.pull_request.head.ref }}
      #     tag=$(echo "$pr_branch" | awk -F'/' '{print $NF}')
      #     echo "TAG=$tag" >> $GITHUB_ENV

      # - name: üîñ Create Tag
      #   id: create_tag
      #   run: |
      #     git tag ${{ env.TAG }}
      #     git push origin ${{ env.TAG }}

      # - name: üì¶Ô∏è Create Release
      #   uses: ncipollo/release-action@v1
      #   with:
      #     artifacts: ./repository.zip
      #     tag: ${{ env.TAG }}


      - name: get the tag name
        run: echo ${GITHUB_REF#refs/tags/}

      # - name: üìù Update Release Description with Closed Issues and Assignees
      #   run: bash scripts/find_closed_issues.sh ${{ secrets.GITHUB_TOKEN }} ${GITHUB_REF#refs/tags/}

      - name: üìù Update Release Description with Closed Issues and Assignees
        run: |
          previous_release_created_at=$(curl -s -H "Authorization: Bearer ${{ github.token }}" "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases" | jq -r '.[] | "\(.tag_name)\t\(.created_at)"' | sort -k2,2r | awk 'NR==2 {print $2}')
          issues=$(curl -s -H "Authorization: Bearer ${{ github.token }}" "https://api.github.com/repos/${GITHUB_REPOSITORY}/issues?state=closed&per_page=100&since=$previous_release_created_at&until=$(date -u +'%Y-%m-%dT%H:%M:%SZ')")

          issues_list=""
          while IFS= read -r row; do
            number=$(echo "$row" | jq -r '.number')
            title=$(echo "$row" | jq -r '.title')
            assignees=$(curl -s -H "Authorization: Bearer ${{ github.token }}" "https://api.github.com/repos/${GITHUB_REPOSITORY}/issues/$number" | jq -r '.assignees[].login ' | xargs)
            url=$(echo "$row" | jq -r '.html_url')
            assignee_links=""
            for assignee in $assignees; do
              assignee_links="$assignee_links[@$assignee](https://github.com/$assignee) "
            done

            issues_list="${issues_list}- $title in [#$number]($url) by $assignee_links\n"
          done < <(echo "$issues" | jq -c '.[]')

          curl -X PATCH -H "Authorization: token ${{ github.token }}" -d '{"body": "Whats Changed:\n\n'"$issues_list"'"}' "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/${GITHUB_REF#refs/tags/}"