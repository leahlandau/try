name: üöÄ Build and deploy to Azure Function App

on:
  push:
    tags:
      - 'v*'

jobs:
  set-up:
    runs-on: 'ubuntu-latest'

    outputs:
      REPO: ${{ steps.downcase.outputs.lowercase }}
      TAG: ${{ steps.get_release.outputs.tag_name }}
      MATRIX: ${{ steps.changed-files.outputs.all_changed_files }}
      LABELS: ${{ steps.docker_meta.outputs.labels }}

    steps:
      - name: üìÇ Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v42
        with:
         json: true
         files: |
            {services/emails,services/subscriptions}/**
         dir_names: true
         dir_names_max_depth: 3
         escape_json: false

      - name: üõ†Ô∏è Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: üîñ Get release tag name
        id: get_release
        uses: cardinalby/git-get-release-action@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          latest: true

      - name: üîÑ downcase REPO
        uses: ASzc/change-string-case-action@v1
        id: downcase
        with:
          string: ${{ github.repository }}

      - name: üê≥ Docker metadata
        id: docker_meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ env.REPO }}/${{ matrix.directory }}
          tags: |
            type=semver,pattern={{major}}.{{minor}}.{{patch}},value=${{ steps.get_release.outputs.tag_name }}
            type=semver,pattern={{major}}.{{minor}},value=${{ steps.get_release.outputs.tag_name }}
            type=semver,pattern={{major}},value=${{ steps.get_release.outputs.tag_name }}

  build-and-deploy:
    runs-on: 'ubuntu-latest'
    needs: set-up
    env:
      REPO: ${{ needs.set-up.outputs.REPO }}
      TAG: ${{ needs.set-up.outputs.TAG }}
      MATRIX: ${{ needs.set-up.outputs.MATRIX }}
      LABELS: ${{ needs.set-up.outputs.LABELS }}
    
    environment:
      name: 'development'
      url: ${{ steps.deploy-to-functions.outputs.app-url }}

    strategy:
      matrix:
        directory: ${{fromJson(needs.set-up.outputs.MATRIX)}}

    steps:
      - name: üìÇ Checkout repository
        uses: actions/checkout@v4

      - name: üß∞ Check and copy necessary files
        run: |
          DIRECTORY=${{ matrix.directory }}
          REQUIRED_FILES=(".funcignore" ".gitignore" "host.json" "local.settings.json" "requirements.txt" "Dockerfile")
          ROOT_DIRECTORY=$(pwd)
          FILES_PATH="$ROOT_DIRECTORY/services"
          for file in "${REQUIRED_FILES[@]}"; do
            if [ ! -f "${FILES_PATH}/${file}" ]; then
              echo "${file} not found in ${FILES_PATH}, cannot copy"
            else
              echo "${file} found in ${FILES_PATH}, copying from there"
              cp "${FILES_PATH}/${file}" "${ROOT_DIRECTORY}/${DIRECTORY}/"
            fi
          done

      - name: üîÑ Extract Last Directory Level
        id: get-last-level
        run: |
          LAST_LEVEL=$(echo ${{ matrix.directory }} | xargs -n 1 basename)
          echo "::set-output name=last_level::$LAST_LEVEL"

      - name: üîë Log in to registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: üîë Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: üèóÔ∏è Build and push container image to registry
        uses: docker/build-push-action@v3
        with:
          context: ./${{ matrix.directory }}
          push: true
          tags: ghcr.io/${{ env.REPO }}-${{ matrix.directory }}:${{ env.TAG }}
          labels: ${{ env.LABELS }}
          file: ./${{ matrix.directory }}/Dockerfile

      - name: üöÄ Deploy to Azure Functions
        id: deploy-to-functions
        uses: Azure/functions-container-action@v1
        with:
          app-name: ${{ steps.get-last-level.outputs.last_level }}
          image: 'ghcr.io/${{ env.REPO }}-${{ steps.get-last-level.outputs.last_level }}:${{ env.TAG }}'
